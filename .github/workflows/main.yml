name: CI/CD Docker DevSecOps

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ,develop ]

jobs:
  security-build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # === PHASE DE SÉCURITÉ ===
      - name: 🔍 Analyse de code (Bandit)
        uses: PyCQA/bandit@main
        with:
          targets: .
          format: json
          output-file: bandit-report.json

      - name: 📦 Scan des dépendances (OWASP)
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'My Docker Project'
          scanpath: '.'
          format: 'HTML'
          out: './security-report'

      - name: 🐳 Analyse de l'image Docker (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker://alpine:latest'
          format: 'table'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'

      # === PHASE DE CONSTRUCTION ===
      - name: 🛠️ Build Docker image
        run: |
          docker build -t my-app --pull --no-cache .
          docker scan --file Dockerfile my-app

      # === PHASE DE TEST ===
      - name: 🧪 Tests de sécurité (ZAP)
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8080'  # À adapter
          rules: 'rules/security'

      - name: 📄 Archivage des rapports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            ./bandit-report.json
            ./security-report
            ./trivy-results.txt

      # === PRÉPARATION DÉPLOIEMENT ===
      - name: 📦 Package pour futur déploiement
        if: github.ref == 'refs/heads/main'
        run: |
          docker save my-app -o my-app.tar
          gzip my-app.tar
        continue-on-error: true

      - name: ⬆️ Upload image package
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: my-app.tar.gz