# name: CI/CD Docker DevSecOps

# on:
#   push:
#     branches: [ main, develop,feature ]
#   pull_request:
#     branches: [ main, develop,feature ]
# jobs:
#   security-build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: üì• Checkout code
#         uses: actions/checkout@v4

#       # === PHASE DE S√âCURIT√â ===
#       - name: üîç Analyse de code (Bandit)
#         run: |
#           python -m pip install bandit
#           bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed (vuln√©rabilit√©s trouv√©es)"

#       - name: üì¶ Scan des d√©pendances (OWASP)
#         uses: dependency-check/Dependency-Check_Action@main
#         with:
#           project: 'My Docker Project'
#           scanpath: '.'
#           format: 'HTML'
#           out: './security-report'

#       - name: üê≥ Analyse de l'image Docker (Trivy)
#         run: |
#           # Installation de Trivy
#           sudo apt-get install -y wget apt-transport-https gnupg lsb-release
#           wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
#           echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
#           sudo apt-get update
#           sudo apt-get install -y trivy
          
#           # Scan avec gestion des erreurs
#           trivy fs --security-checks vuln --severity HIGH,CRITICAL --exit-code 0 --format table . || echo "Trivy scan completed"

#       # === PHASE DE CONSTRUCTION ===
#       - name: üõ†Ô∏è Build Docker image
#         run: |
#           docker build -t my-app --pull --no-cache .
#           docker scan --file Dockerfile my-app || echo "Docker scan completed"

#       # === PHASE DE TEST ===
#       - name: üß™ Tests de s√©curit√© (ZAP)
#         uses: zaproxy/action-baseline@v0.10.0
#         continue-on-error: true
#         with:
#           target: 'http://localhost:8080'
#           rules: 'rules/security'

#       - name: üìÑ Archivage des rapports
#         uses: actions/upload-artifact@v4
#         with:
#           name: security-reports
#           path: |
#             ./bandit-report.json
#             ./security-report
#             ./trivy-results.txt

#       # === NETTOYAGE ===
#       - name: üßπ Nettoyage des fichiers temporaires
#         run: |
#           # Suppression conditionnelle
#           [ -f trivy_envs.txt ] && rm -f trivy_envs.txt || echo "Fichier trivy_envs.txt non trouv√©"
#           docker system prune -f
#           docker save my-app -o my-app.tar
#           gzip my-app.tar
#         continue-on-error: true

#       - name: ‚¨ÜÔ∏è Upload image package
#         if: github.ref == 'refs/heads/main'
#         uses: actions/upload-artifact@v4
#         with:
#           name: docker-image
#           path: my-app.tar.gz




name: CI/CD Docker DevSecOps with SendGrid

on:
  push:
    branches: [main, develop, feature]
  pull_request:
    branches: [main, develop, feature]

jobs:
  security-build:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      # === SECURITY SCANNING ===
      - name: üîç Static Code Analysis (Bandit)
        run: |
          python -m pip install bandit
          bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed"

      - name: üì¶ Dependency Scanning (OWASP)
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Security Report'
          scanpath: '.'
          format: 'HTML'
          out: './security-report'

      - name: üê≥ Container Scanning (Trivy)
        run: |
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          trivy fs --security-checks vuln --severity HIGH,CRITICAL --exit-code 0 --format table -o trivy-results.txt .

      # === BUILD ===
      - name: üõ†Ô∏è Build Docker Image
        run: |
          docker build -t my-app --pull --no-cache .
          docker scan --file Dockerfile my-app > docker-scan-report.txt || echo "Docker scan completed"

      # === TESTING ===
      - name: üß™ Security Testing (ZAP)
        uses: zaproxy/action-baseline@v0.10.0
        continue-on-error: true
        with:
          target: 'http://localhost:8080'
          rules: 'rules/security'
          report_html: 'zap-report.html'

      # === REPORT COLLECTION ===
      - name: üì¶ Package Security Reports
        run: |
          mkdir -p combined-reports
          cp bandit-report.json combined-reports/
          cp security-report/dependency-check-report.html combined-reports/
          cp trivy-results.txt combined-reports/
          cp docker-scan-report.txt combined-reports/
          cp zap-report.html combined-reports/
          
          # Create summary file
          echo "Security Scan Summary" > combined-reports/summary.txt
          echo "====================" >> combined-reports/summary.txt
          echo "Bandit Findings: $(grep -c '"issue"' bandit-report.json || echo 0)" >> combined-reports/summary.txt
          echo "Dependency Vulnerabilities: $(grep -c 'vulnerability' security-report/dependency-check-report.html || echo 0)" >> combined-reports/summary.txt
          echo "Container Vulnerabilities: $(grep -c 'HIGH\|CRITICAL' trivy-results.txt || echo 0)" >> combined-reports/summary.txt

      - name: üì§ Upload Reports Artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: combined-reports/

      # === SENDGRID EMAIL ===
      - name: üìß Send Security Report via SendGrid
        if: always()
        uses: actions-hub/sendgrid@master
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
          EMAIL_SUBJECT: "Security Scan Report - ${{ github.repository }} - ${{ github.sha }}"
          EMAIL_BODY: "Please find attached the security scan reports."
        with:
          files: |
            combined-reports/bandit-report.json
            combined-reports/dependency-check-report.html
            combined-reports/trivy-results.txt
            combined-reports/docker-scan-report.txt
            combined-reports/zap-report.html
            combined-reports/summary.txt

      # === CLEANUP ===
      - name: üßπ Cleanup
        run: |
          docker system prune -f
      - name: üßπ Nettoyage des fichiers temporaires
        run: |
          # Suppression conditionnelle
          [ -f trivy_envs.txt ] && rm -f trivy_envs.txt || echo "Fichier trivy_envs.txt non trouv√©"
          docker system prune -f
          docker save my-app -o my-app.tar
          gzip my-app.tar
        continue-on-error: true

      - name: ‚¨ÜÔ∏è Upload image package
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
   