# name: CI/CD Docker DevSecOps

# on:
#   push:
#     branches: [ main, develop, feature ]
#   pull_request:
#     branches: [ main, develop, feature ]

# jobs:
#   security-build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: 📥 Checkout code
#         uses: actions/checkout@v4

#       # === PHASE DE SÉCURITÉ ===
#       - name: 🔍 Analyse de code (Bandit)
#         run: |
#           pip install bandit jq
#           bandit -r . -f json -o bandit-full.json || true
#           jq '[.results[] | select(.issue_severity == "MEDIUM" or .issue_severity == "HIGH")]' bandit-full.json > bandit-report.json

#       - name: 📦 Scan des dépendances (OWASP)
#         run: |
#           curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.7/dependency-check-9.0.7-release.zip
#           unzip dependency-check.zip -d dependency-check && rm dependency-check.zip
#           ./dependency-check/bin/dependency-check.sh -s . -o ./owasp-report -f JSON
#           jq '[.dependencies[] | select(.vulnerabilities != null) | .vulnerabilities[] | select(.severity == "MEDIUM" or .severity == "HIGH")]' ./owasp-report/dependency-check-report.json > owasp-filtered.json

#       - name: 🐳 Analyse de l'image Docker (Trivy)
#         run: |
#           sudo apt-get update && sudo apt-get install -y wget gnupg lsb-release
#           wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
#           echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
#           sudo apt-get update && sudo apt-get install -y trivy
#           trivy fs --security-checks vuln --severity MEDIUM,HIGH,CRITICAL --exit-code 0 --format json -o trivy-results.json .

#       # === NOTIFICATION EMAIL ===
#       - name: 📧 Envoyer un email au responsable
#         uses: dawidd6/action-send-mail@v3
#         with:
#           server_address: smtp.example.com
#           server_port: 587
#           username: ${{ secrets.SMTP_USERNAME }}
#           password: ${{ secrets.SMTP_PASSWORD }}
#           subject: "📢 Résultats des scans de sécurité CI/CD"
#           to: ${{ github.repository_owner }}
#           from: "ci-pipeline@monprojet.dev"
#           body: |
#             Bonjour,

#             Le pipeline CI/CD a terminé l’analyse de sécurité. Voici les vulnérabilités filtrées :

#             Bandit : bandit-report.json  
#             Dépendances : owasp-filtered.json  
#             Trivy : trivy-results.json

#             Cordialement,  
#             Votre pipeline automatisé.

#           attachments: |
#             bandit-report.json
#             owasp-filtered.json
#             trivy-results.json

#       # === ARCHIVAGE ===
#       - name: 📄 Archivage des rapports
#         uses: actions/upload-artifact@v4
#         with:
#           name: rapports-securite
#           path: |
#             bandit-report.json
#             owasp-filtered.json
#             trivy-results.json

#       # === NETTOYAGE ===
#       - name: 🧹 Nettoyage
#         run: |
#           docker system prune -f
#           docker save my-app -o my-app.tar && gzip my-app.tar

#       - name: ⬆️ Upload image Docker
#         if: github.ref == 'refs/heads/main'
#         uses: actions/upload-artifact@v4
#         with:
#           name: docker-image
#           path: my-app.tar.gz


# #=================================================
# #=============== DEBUT ====================
# #=================================================


# # name: CI/CD Docker DevSecOps with SendGrid

# # on:
# #   push:
# #     branches: [main, develop, feature]
# #   pull_request:
# #     branches: [main, develop, feature]

# # jobs:
# #   security-build:
# #     runs-on: ubuntu-latest

# #     steps:
# #       - name: 📥 Checkout code
# #         uses: actions/checkout@v4

# #       # === SECURITY SCANNING ===
# #       - name: 🔍 Static Code Analysis (Bandit)
# #         run: |
# #           python -m pip install bandit
# #           bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed"

# #       - name: 📦 Dependency Scanning (OWASP)
# #         uses: dependency-check/Dependency-Check_Action@main
# #         with:
# #           project: 'Security Report'
# #           scanpath: '.'
# #           format: 'HTML'
# #           out: './security-report'

# #       - name: 🐳 Container Scanning (Trivy)
# #         run: |
# #           sudo apt-get install -y wget apt-transport-https gnupg lsb-release
# #           wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
# #           echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
# #           sudo apt-get update
# #           sudo apt-get install -y trivy
# #           trivy fs --security-checks vuln --severity HIGH,CRITICAL --exit-code 0 --format table -o trivy-results.txt .

# #       # === BUILD ===
# #       - name: 🛠️ Build Docker Image
# #         run: |
# #           docker build -t my-app --pull --no-cache .
# #           docker scan --file Dockerfile my-app > docker-scan-report.txt || echo "Docker scan completed"

# #       # === TESTING ===
# #       - name: 🧪 Security Testing (ZAP)
# #         uses: zaproxy/action-baseline@v0.10.0
# #         continue-on-error: true
# #         with:
# #           target: 'http://localhost:8080'
# #           rules: 'rules/security'
# #           report_html: 'zap-report.html'

# #       # === REPORT COLLECTION ===
# #       - name: 📦 Package Security Reports
# #         run: |
# #           mkdir -p combined-reports
# #           cp bandit-report.json combined-reports/
# #           cp security-report/dependency-check-report.html combined-reports/
# #           cp trivy-results.txt combined-reports/
# #           cp docker-scan-report.txt combined-reports/
# #           cp zap-report.html combined-reports/
          
# #           # Create summary file
# #           echo "Security Scan Summary" > combined-reports/summary.txt
# #           echo "====================" >> combined-reports/summary.txt
# #           echo "Bandit Findings: $(grep -c '"issue"' bandit-report.json || echo 0)" >> combined-reports/summary.txt
# #           echo "Dependency Vulnerabilities: $(grep -c 'vulnerability' security-report/dependency-check-report.html || echo 0)" >> combined-reports/summary.txt
# #           echo "Container Vulnerabilities: $(grep -c 'HIGH\|CRITICAL' trivy-results.txt || echo 0)" >> combined-reports/summary.txt

# #       - name: 📤 Upload Reports Artifact
# #         uses: actions/upload-artifact@v4
# #         with:
# #           name: security-reports
# #           path: combined-reports/

# #       # === SENDGRID EMAIL ===
# #       - name: 📧 Send Security Report via SendGrid
# #         if: always()
# #         uses: actions-hub/sendgrid@master
# #         env:
# #           SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
# #           EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
# #           EMAIL_TO: ${{ secrets.EMAIL_TO }}
# #           EMAIL_SUBJECT: "Security Scan Report - ${{ github.repository }} - ${{ github.sha }}"
# #           EMAIL_BODY: "Please find attached the security scan reports."
# #         with:
# #           files: |
# #             combined-reports/bandit-report.json
# #             combined-reports/dependency-check-report.html
# #             combined-reports/trivy-results.txt
# #             combined-reports/docker-scan-report.txt
# #             combined-reports/zap-report.html
# #             combined-reports/summary.txt

# #       # === CLEANUP ===
# #       - name: 🧹 Cleanup
# #         run: |
# #           docker system prune -f
# #       - name: 🧹 Nettoyage des fichiers temporaires
# #         run: |
# #           # Suppression conditionnelle
# #           [ -f trivy_envs.txt ] && rm -f trivy_envs.txt || echo "Fichier trivy_envs.txt non trouvé"
# #           docker system prune -f
# #           docker save my-app -o my-app.tar
# #           gzip my-app.tar
# #         continue-on-error: true

# #       - name: ⬆️ Upload image package
# #         if: github.ref == 'refs/heads/main'
# #         uses: actions/upload-artifact@v4
# #         with:
# #           name: docker-image
   

# #=================================================
# #================ FIN ====================
# #=================================================


# name: CI/CD Docker DevSecOps

# on:
#   push:
#     branches: [main, develop, feature]
#   pull_request:
#     branches: [main, develop, feature]

# jobs:
#   security-build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: 📥 Checkout code
#         uses: actions/checkout@v4

#       # === SCAN BANDIT ===
#       - name: 🔍 Analyse Bandit (Sévérité filtrée)
#         run: |
#           pip install bandit jq
#           bandit -r . -f json -o bandit-full.json || true
#           jq '[.results[] | select(.issue_severity=="MEDIUM" or .issue_severity=="HIGH")]' bandit-full.json > bandit-report.json

#       # === SCAN DÉPENDANCES (OWASP) ===
#       - name: 📦 Détection de vulnérabilités dépendances
#         run: |
#           curl -L -o dep-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.7/dependency-check-9.0.7-release.zip
#           unzip dep-check.zip -d dep-check && rm dep-check.zip
#           ./dep-check/bin/dependency-check.sh -s . -o ./owasp-report -f JSON || true
#           jq '[.dependencies[] | select(.vulnerabilities) | .vulnerabilities[] | select(.severity=="MEDIUM" or .severity=="HIGH")]' ./owasp-report/dependency-check-report.json > owasp-filtered.json

#       # === SCAN TRIVY ===
#       - name: 🐳 Analyse Docker avec Trivy
#         run: |
#           sudo apt-get update && sudo apt-get install -y wget gnupg lsb-release
#           wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
#           echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
#           sudo apt-get update && sudo apt-get install -y trivy
#           trivy fs --security-checks vuln --severity MEDIUM,HIGH,CRITICAL --format json -o trivy-results.json . || true

#       # === NOTIFICATION EMAIL ===
#       - name: 📧 Envoi mail de sécurité
#         uses: dawidd6/action-send-mail@v3
#         with:
#           server_address: smtp.example.com
#           server_port: 587
#           username: ${{ secrets.SMTP_USERNAME }}
#           password: ${{ secrets.SMTP_PASSWORD }}
#           subject: "[CI/CD] Résultats DevSecOps - ${{ github.repository }}"
#           to: ${{ github.repository_owner }}
#           from: "ci@security-bot.dev"
#           body: |
#             Bonjour ${{ github.repository_owner }},

#             Votre dépôt a été analysé automatiquement par le pipeline DevSecOps :

#             - Vulnérabilités Bandit (moyennes/hautes)
#             - Dépendances sensibles détectées
#             - Résultats de scan Trivy

#             Consultez les rapports ci-joints pour en savoir plus.

#             -- L'équipe CI/CD
#           attachments: |
#             bandit-report.json
#             owasp-filtered.json
#             trivy-results.json

#       # === NOTIFICATION SLACK ===
#       - name: 📢 Alerte Slack
#         uses: slackapi/slack-github-action@v1.24.0
#         with:
#           payload: |
#             {
#               "text": ":rotating_light: *Résultats DevSecOps CI/CD - ${{ github.repository }}*",
#               "attachments": [
#                 {
#                   "color": "#e01e5a",
#                   "fields": [
#                     {
#                       "title": "Bandit",
#                       "value": "✔️ Vulnérabilités filtrées (MEDIUM/HIGH)"
#                     },
#                     {
#                       "title": "Dépendances",
#                       "value": "✔️ Rapports OWASP générés"
#                     },
#                     {
#                       "title": "Docker Scan",
#                       "value": "✔️ Résultats Trivy disponibles"
#                     }
#                   ]
#                 }
#               ]
#             }
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

#       # === BUILD IMAGE DOCKER ===
#       - name: 🛠️ Build image Docker
#         run: |
#           docker build -t my-app --pull --no-cache . || exit 1

#       # === ARCHIVAGE ===
#       - name: 📄 Archivage des rapports
#         uses: actions/upload-artifact@v4
#         with:
#           name: rapports-securite
#           path: |
#             bandit-report.json
#             owasp-filtered.json
#             trivy-results.json

#       # === NETTOYAGE ===
#       - name: 🧼 Nettoyage et export image
#         run: |
#           docker save my-app -o my-app.tar && gzip my-app.tar
#           docker system prune -f
#         continue-on-error: true

#       # === UPLOAD IMAGE FINAL ===
#       - name: ⬆️ Upload de l'image Docker
#         if: github.ref == 'refs/heads/main'
#         uses: actions/upload-artifact@v4
#         with:
#           name: docker-image
#           path: my-app.tar.gz




#################################################################33
name: CI/CD Docker DevSecOps

on:
  push:
    branches: [main, develop, feature/**]
  pull_request:
    branches: [main, develop]

jobs:
  security-build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Nécessaire pour SonarQube

      # === 🔍 Analyse statique avec SonarQube ===
      - name: Analyse SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=my-project
            -Dsonar.projectName=My_Project
            -Dsonar.exclusions=**/tests/**,**/node_modules/**

      # === 🔍 Analyse de sécurité avec BANDIT ===
      - name: Analyse Bandit
        run: |
          pip install bandit jq
          bandit -r . -f json -o bandit-full.json || true
          jq '[.results[] | select(.issue_severity=="MEDIUM" or .issue_severity=="HIGH")]' bandit-full.json > bandit-report.json

      # === 📦 Analyse de dépendances (OWASP) ===
      - name: Scan des dépendances
        run: |
          curl -L -o dep-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.7/dependency-check-9.0.7-release.zip
          unzip dep-check.zip -d dep-check && rm dep-check.zip
          ./dep-check/bin/dependency-check.sh -s . -o owasp-report -f JSON || true
          jq '[.dependencies[] | select(.vulnerabilities) | .vulnerabilities[] | select(.severity=="MEDIUM" or .severity=="HIGH")]' owasp-report/dependency-check-report.json > owasp-filtered.json

      # === 🐳 Analyse de l'image Docker (TRIVY) ===
      - name: Docker scan avec Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
          trivy fs --security-checks vuln --severity MEDIUM,HIGH,CRITICAL --format json -o trivy-results.json . || true

      # === 🛠️ Build de l'image Docker ===
      - name: Build image Docker
        run: |
          docker build -t my-app:${{ github.sha }} --pull --no-cache . || exit 1

      # === 🔐 Archivage de sécurité ===
      - name: Archivage des rapports
        uses: actions/upload-artifact@v4
        with:
          name: rapports-securite-${{ github.run_id }}
          path: |
            bandit-report.json
            owasp-filtered.json
            trivy-results.json
          retention-days: 7

      # === ✉️ Envoi de l'alerte EMAIL ===
      - name: Notification Email
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "[CI/CD] Résultats DevSecOps - ${{ github.repository }}"
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: "CI/CD Pipeline <noreply@mycompany.com>"
          body: |
            Rapport de sécurité CI/CD pour le commit ${{ github.sha }}:
            
            🔍 SonarQube: ${{ secrets.SONAR_HOST_URL }}/dashboard?id=my-project
            ✅ Bandit: bandit-report.json  
            ✅ Dépendances: owasp-filtered.json  
            ✅ Docker Scan: trivy-results.json

            Job URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          attachments: |
            bandit-report.json
            owasp-filtered.json
            trivy-results.json

      # === 📨 Notification Slack ===
      - name: Alerte Slack
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":lock: Résultats DevSecOps CI/CD *${{ github.repository }}* (commit: ${{ github.sha }}) :",
              "attachments": [
                {
                  "color": "#36a64f",
                  "fields": [
                    {"title": "SonarQube", "value": "<${{ secrets.SONAR_HOST_URL }}/dashboard?id=my-project|Rapport SonarQube>"},
                    {"title": "Bandit", "value": "`bandit-report.json`"},
                    {"title": "Dépendances", "value": "`owasp-filtered.json`"},
                    {"title": "Trivy", "value": "`trivy-results.json`"}
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # === 🧹 Nettoyage final ===
      - name: Nettoyage et export image
        run: |
          docker save my-app:${{ github.sha }} -o my-app.tar && gzip my-app.tar
          docker system prune -f
        continue-on-error: true

      # === 📦 Upload de l'image Docker ===
      - name: Upload image Docker
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ github.run_id }}
          path: my-app.tar.gz
          retention-days: 7
##################################################################